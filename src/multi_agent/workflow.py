from typing import Dict, Any

from .shared_state import SharedState
from .orchestrator_agent import OrchestratorAgent
from ..llm_provider import LLMProvider
from ..models import AnalysisResult, JobAssessment, ResumeImprovements, CoverLetter, InterviewQuestions, NextSteps


def run_multi_agent_workflow(
    llm_provider: LLMProvider, job_description: str, resume: str, user_email: str | None = None, user_name: str | None = None
) -> AnalysisResult:
    orchestrator = OrchestratorAgent(llm_provider)

    state: SharedState = {
        "job_description": job_description,
        "resume": resume,
        "flags": {},
        "metadata": {"user_email": user_email, "user_name": user_name},
        "user_email": user_email or "",
        "user_name": user_name or "",
    }

    final_state = orchestrator.run(state)

    # Map to AnalysisResult
    assessment = None
    if final_state.get("assessment"):
        assessment = JobAssessment(**final_state["assessment"])  # type: ignore[arg-type]

    resume_improvements = None
    if final_state.get("resume_improvements"):
        resume_improvements = ResumeImprovements(**final_state["resume_improvements"])  # type: ignore[arg-type]

    cover_letter = None
    if final_state.get("cover_letter"):
        cover_letter = CoverLetter(**final_state["cover_letter"])  # type: ignore[arg-type]

    interview_questions = None
    if final_state.get("interview_questions"):
        interview_questions = InterviewQuestions(**final_state["interview_questions"])  # type: ignore[arg-type]

    # Next steps not generated by agents yet
    next_steps = None

    should_proceed = bool(assessment and assessment.rating >= 7)

    return AnalysisResult(
        assessment=assessment,
        resume_improvements=resume_improvements,
        cover_letter=cover_letter,
        interview_questions=interview_questions,
        next_steps=next_steps,
        should_proceed=should_proceed,
        error_info=None,
    )


